import asyncio
import random
import base64
import json
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.types import InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, WebAppInfo

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BOT_TOKEN = "7489239125:AAHNQv2wQhJoZyk8d8JQGfznio-bbvNQ5sA"
TICKET_PRICE = 48
TIMEZONE_OFFSET = timedelta(hours=7)  # UTC+7
BUS_REGION = "124"  # –†–µ–≥–∏–æ–Ω –¥–ª—è –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–±—É—Å–∞
MINI_APP_URL = "https://busticket-three.vercel.app/"  # URL –≤–∞—à–µ–≥–æ Mini App

# --- –î–∞–Ω–Ω—ã–µ –æ –º–∞—Ä—à—Ä—É—Ç–∞—Ö –∏ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞—Ö ---
routes_data = {
    "94": {
        "name": "–õ–î–ö - –¢–≠–¶-3",
        "carriers": {
            "–û–û–û –ü—Ä–∞–∫—Ç–∏–∫": "–û–û–û –ü—Ä–∞–∫—Ç–∏–∫",
            "–û–û–û –ú–∞—Ä—à—Ä—É—Ç–ê–≤—Ç–æ": "–û–û–û –ú–∞—Ä—à—Ä—É—Ç–ê–≤—Ç–æ",
            "–ò–ü –ö–∞—Ä–∞—Å–µ–≤–∞ –ù. –ù.": "–ò–ü –ö–∞—Ä–∞—Å–µ–≤–∞ –ù. –ù."
        }
    },
    "52": {
        "name": "–õ–î–ö - –û–∑–µ—Ä–æ-–ø–∞—Ä–∫",
        "carriers": {
            "–ö–ü–ê–¢–ü-5": "–ö–ü–ê–¢–ü-5"
        }
    },    
    "98": {
        "name": "–í–æ–∫–∑–∞–ª - –ü–æ—Å—ë–ª–æ–∫ –°–µ–≤–µ—Ä–Ω—ã–π", 
        "carriers": {
            "–ò–ü –ì–Ω–µ—Ç–æ–≤ –Æ. –ù.": "–ò–ü –ì–Ω–µ—Ç–æ–≤ –Æ. –ù."
        }
    },
        "95": {
        "name": "–í–µ—Ä—Ö–Ω–∏–µ –ß–µ—Ä–µ–º—É—à–∫–∏-–õ–î–ö", 
        "carriers": {
            "–ö–ü–ê–¢–ü-7": "–ö–ü–ê–¢–ü-7"
        }
    }
}

# --- –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π (FSM) ---
class TicketPurchase(StatesGroup):
    waiting_route = State()
    waiting_carrier = State()
    waiting_bus = State()
    waiting_quantity = State()

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ---
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def get_carrier_keyboard(route_number: str) -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞–º–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞"""
    builder = ReplyKeyboardBuilder()
    carriers = routes_data[route_number]["carriers"]
    
    for carrier in carriers.values():
        builder.add(KeyboardButton(text=carrier))
    
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_start_keyboard() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞—á–∞–ª–∞ –ø–æ–∫—É–ø–∫–∏"""
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="üé´ –ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç"))
    return builder.as_markup(resize_keyboard=True)

async def delete_messages(chat_id: int, message_ids: list):
    """–£–¥–∞–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    for msg_id in message_ids:
        try:
            await bot.delete_message(chat_id=chat_id, message_id=msg_id)
        except Exception:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è (—Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤)
            pass

# --- –•—ç–Ω–¥–ª–µ—Ä—ã ---

# Start command
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –±–∏–ª–µ—Ç:",
        reply_markup=get_start_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç"
@dp.message(F.text == "üé´ –ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç")
async def start_purchase(message: types.Message, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    try:
        await message.delete()
    except:
        pass
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    await state.set_data({"messages_to_delete": []})
    await ask_for_route(message, state)

async def ask_for_route(message: types.Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–∞"""
    msg = await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞—Ä—à—Ä—É—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 94):",
        reply_markup=types.ReplyKeyboardRemove()
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    data = await state.get_data()
    messages_to_delete = data.get("messages_to_delete", [])
    messages_to_delete.append(msg.message_id)
    await state.update_data(messages_to_delete=messages_to_delete)
    
    await state.set_state(TicketPurchase.waiting_route)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–∞
@dp.message(TicketPurchase.waiting_route)
async def process_route(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    data = await state.get_data()
    messages_to_delete = data.get("messages_to_delete", [])
    messages_to_delete.append(message.message_id)
    
    route_number = message.text.strip()
    
    if route_number not in routes_data:
        msg = await message.answer("‚ùå –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –º–∞—Ä—à—Ä—É—Ç–∞:")
        messages_to_delete.append(msg.message_id)
        await state.update_data(messages_to_delete=messages_to_delete)
        return
    
    await state.update_data(route_number=route_number)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞–º–∏ –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
    keyboard = get_carrier_keyboard(route_number)
    
    msg = await message.answer(
        f"–ú–∞—Ä—à—Ä—É—Ç {route_number} - {routes_data[route_number]['name']}\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞:",
        reply_markup=keyboard
    )
    messages_to_delete.append(msg.message_id)
    await state.update_data(messages_to_delete=messages_to_delete)
    await state.set_state(TicketPurchase.waiting_carrier)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞
@dp.message(TicketPurchase.waiting_carrier)
async def process_carrier(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    data = await state.get_data()
    messages_to_delete = data.get("messages_to_delete", [])
    messages_to_delete.append(message.message_id)
    
    carrier = message.text.strip()
    data = await state.get_data()
    route_number = data['route_number']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫ –µ—Å—Ç—å –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
    if carrier not in routes_data[route_number]["carriers"].values():
        msg = await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:")
        messages_to_delete.append(msg.message_id)
        await state.update_data(messages_to_delete=messages_to_delete)
        return
    
    await state.update_data(carrier=carrier)
    msg = await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–±—É—Å–∞ (–ø–µ—Ä–≤—ã–µ 6 —Å–∏–º–≤–æ–ª–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä: x677ca):",
        reply_markup=types.ReplyKeyboardRemove()
    )
    messages_to_delete.append(msg.message_id)
    await state.update_data(messages_to_delete=messages_to_delete)
    await state.set_state(TicketPurchase.waiting_bus)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–±—É—Å–∞
@dp.message(TicketPurchase.waiting_bus)
async def process_bus(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    data = await state.get_data()
    messages_to_delete = data.get("messages_to_delete", [])
    messages_to_delete.append(message.message_id)
    
    bus_prefix = message.text.strip()
    
    if len(bus_prefix) != 6 or not bus_prefix.isalnum():
        msg = await message.answer("‚ùå –ù–æ–º–µ—Ä –∞–≤—Ç–æ–±—É—Å–∞ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 6 —Å–∏–º–≤–æ–ª–æ–≤ (–±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        messages_to_delete.append(msg.message_id)
        await state.update_data(messages_to_delete=messages_to_delete)
        return
    
    full_bus_number = f"{bus_prefix}{BUS_REGION}"
    await state.update_data(bus_number=full_bus_number)
    msg = await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤:")
    messages_to_delete.append(msg.message_id)
    await state.update_data(messages_to_delete=messages_to_delete)
    await state.set_state(TicketPurchase.waiting_quantity)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∏–ª–µ—Ç–æ–≤
@dp.message(TicketPurchase.waiting_quantity)
async def process_quantity(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    data = await state.get_data()
    messages_to_delete = data.get("messages_to_delete", [])
    messages_to_delete.append(message.message_id)
    
    try:
        quantity = int(message.text)
        if quantity <= 0:
            raise ValueError
    except ValueError:
        msg = await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–±–æ–ª—å—à–µ 0):")
        messages_to_delete.append(msg.message_id)
        await state.update_data(messages_to_delete=messages_to_delete)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    route_number = data['route_number']
    route_name = routes_data[route_number]['name']
    carrier = data['carrier']
    bus_number = data['bus_number']
    messages_to_delete = data.get("messages_to_delete", [])
    
    total_price = TICKET_PRICE * quantity
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∏–ª–µ—Ç
    ticket_number = random.randint(1300000000, 2000000000)
    purchase_time = datetime.utcnow() + TIMEZONE_OFFSET
    valid_until = purchase_time + timedelta(hours=2)  # –î–µ–π—Å—Ç–≤—É–µ—Ç 2 —á–∞—Å–∞
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
    valid_until_str = valid_until.strftime("%H:%M")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–∏–ª–µ—Ç–æ–º
    ticket_message = (
        f"<b>–ë–∏–ª–µ—Ç –∫—É–ø–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ.</b>\n"
        f"{carrier}\n"
        f"üöè {route_number} {route_name}\n"
        f"üöå {bus_number}\n"
        f"ü™ô –¢–∞—Ä–∏—Ñ: –ü–æ–ª–Ω—ã–π {total_price},00 ‚ÇΩ\n"
        f"üé´ –ë–∏–ª–µ—Ç ‚Ññ {ticket_number}\n"
        f"üïë –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {valid_until_str}"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–µ–¥—ä—è–≤–∏—Ç—å –±–∏–ª–µ—Ç" —Å Mini App
    ticket_data = {
        "number": ticket_number,
        "route_number": route_number,
        "route_name": route_name,
        "carrier": carrier,
        "bus_number": bus_number,
        "valid_until": valid_until_str,
        "price": TICKET_PRICE,
        "quantity": quantity,
        "total_price": total_price
    }
    
    ticket_data_json = json.dumps(ticket_data)
    ticket_data_b64 = base64.urlsafe_b64encode(ticket_data_json.encode()).decode()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è Mini App —Å –¥–∞–Ω–Ω—ã–º–∏ –±–∏–ª–µ—Ç–∞
    mini_app_url = f"{MINI_APP_URL}?data={ticket_data_b64}"
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å WebApp
    web_app = WebAppInfo(url=mini_app_url)
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="üé´ –ü—Ä–µ–¥—ä—è–≤–∏—Ç—å –±–∏–ª–µ—Ç", web_app=web_app))
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∏ –±–æ—Ç–∞, –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    await delete_messages(message.chat.id, messages_to_delete)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–∏–ª–µ—Ç–æ–º
    await message.answer(
        ticket_message,
        reply_markup=keyboard.as_markup(),
        parse_mode="HTML"
    )
    
    await state.clear()

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())